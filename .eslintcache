[{"D:\\code\\weather\\src\\index.tsx":"1","D:\\code\\weather\\src\\App.tsx":"2","D:\\code\\weather\\src\\Card.tsx":"3"},{"size":268,"mtime":1611606911090,"results":"4","hashOfConfig":"5"},{"size":2109,"mtime":1612025604294,"results":"6","hashOfConfig":"5"},{"size":825,"mtime":1611863729033,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"2yq3hz",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\code\\weather\\src\\index.tsx",[],["16","17"],"D:\\code\\weather\\src\\App.tsx",["18"],"import React from 'react';\nimport './App.scss';\nimport Card from './Card';\n\nconst App = () => {\n\n  let [mapCards, setMapCards] = React.useState<any>();\n  React.useEffect(() => {\n    fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=London&appid=14358bcdca1ca0a20ba95b2d02b61bd4\")\n      .then(rest => rest.json())\n      .then(json => {\n\n        let reg: RegExp = /^20\\d{2}-\\d{2}-\\d{2}\\s15:00:00/i,\n          filterArray: Array<any> = json.list.filter((e: any) => e.dt_txt.match(reg));\n        let mapArr: any = filterArray.map((e: any, index: number) => (<Card key={index} date={e} />))\n        setMapCards(mapCards = mapArr)\n\n      }).catch((e) => {\n        alert(e)\n      })\n  }, [])\n  const inp: any = React.createRef();\n  const city: any = React.createRef();\n  const req = () => {\n    if (/^[A-zА-я]+/.test(inp.current.value)) {\n      fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${inp.current.value}&appid=14358bcdca1ca0a20ba95b2d02b61bd4`)\n        .then(rest => rest.json())\n        .then(json => {\n\n          let reg: RegExp = /^20\\d{2}-\\d{2}-\\d{2}\\s15:00:00/i,\n            filterArray: Array<any> = json.list.filter((e: any) => e.dt_txt.match(reg));\n          let mapArr: any = filterArray.map((e: any, index: number) => (<Card key={index} date={e} />))\n          setMapCards(mapCards = mapArr)\n\n        }).catch(() => {\n          setMapCards(mapCards = []);\n          alert(\"Город не найден :(\")\n        })\n\n        city.current.innerHTML = inp.current.value;\n    } else {\n      alert(\"Пожалуйста заполните правильно строку, согласно образцу\")\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 ref={city}>London</h1>\n      <div className=\"search\">\n        <input ref={inp} placeholder=\" London\" type=\"text\" />\n        <button onClick={req}>&#8594;</button>\n      </div>\n      <div className=\"wrapper\">\n        <div className=\"fon\"></div>\n        <section className=\"cards\">\n          <section>\n            {mapCards}\n          </section>\n        </section>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","D:\\code\\weather\\src\\Card.tsx",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":16,"column":32,"nodeType":"25","endLine":16,"endColumn":38},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"react-hooks/exhaustive-deps","Assignments to the 'mapCards' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Identifier","no-global-assign","no-unsafe-negation"]